name: Release Charts
on:
  push:
    branches:
      - main
      - fix-chart-releaser
    paths:
      - 'charts/**'

jobs:
  release-charts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history is needed for proper diffing
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      
      - name: Install Helm
        uses: azure/setup-helm@v3
      
      - name: Add Helm repos
        run: |
          # Add commonly used Helm repositories
          helm repo add stable https://charts.helm.sh/stable
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
      
      - name: Install chart-releaser
        run: |
          mkdir -p .cr-release-packages
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.6.0/chart-releaser_1.6.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          chmod +x cr
          sudo mv cr /usr/local/bin/cr
      
      - name: Debug file changes
        run: |
          echo "Changed files:"
          git diff --name-only HEAD~1 HEAD
      
      # Manual detection of chart changes
      - name: Detect chart changes
        id: manual-filter
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || git diff --name-only $(git rev-parse HEAD~1) $(git rev-parse HEAD))
          echo "Changed files: $CHANGED_FILES"
          
          # Initialize outputs
          echo "guard=false" >> $GITHUB_OUTPUT
          echo "watch=false" >> $GITHUB_OUTPUT
          echo "path=false" >> $GITHUB_OUTPUT
          
          # Check if each chart directory has changes
          echo "$CHANGED_FILES" | grep -q "charts/guard/" && echo "guard=true" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" | grep -q "charts/watch/" && echo "watch=true" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" | grep -q "charts/path/" && echo "path=true" >> $GITHUB_OUTPUT
          
          # Output results for logging
          echo "Guard chart changed: $(echo "$CHANGED_FILES" | grep -q "charts/guard/" && echo "true" || echo "false")"
          echo "Watch chart changed: $(echo "$CHANGED_FILES" | grep -q "charts/watch/" && echo "true" || echo "false")"
          echo "Path chart changed: $(echo "$CHANGED_FILES" | grep -q "charts/path/" && echo "true" || echo "false")"
      
      # Debug chart changes
      - name: Debug chart changes
        run: |
          echo "Guard changed: ${{ steps.manual-filter.outputs.guard }}"
          echo "Watch changed: ${{ steps.manual-filter.outputs.watch }}"
          echo "Path changed: ${{ steps.manual-filter.outputs.path }}"
      
      # Process charts - Two-phase approach
      # Phase 1: Build and make all charts available locally first
      - name: Build guard chart
        if: steps.manual-filter.outputs.guard == 'true'
        run: |
          echo "Building guard chart..."
          mkdir -p .cr-local-charts
          helm dependency build charts/guard
          helm package charts/guard -d .cr-local-charts
      
      - name: Build watch chart
        if: steps.manual-filter.outputs.watch == 'true'
        run: |
          echo "Building watch chart..."
          mkdir -p .cr-local-charts
          
          # If guard was updated and is a dependency, use the local version
          if grep -q "name: guard" charts/watch/Chart.yaml && [ -f "$(ls -1 .cr-local-charts/guard-*.tgz 2>/dev/null | head -1)" ]; then
            echo "Using local guard chart for dependency"
            mkdir -p charts/watch/charts
            cp .cr-local-charts/guard-*.tgz charts/watch/charts/
          fi
          
          helm dependency build charts/watch
          helm package charts/watch -d .cr-local-charts
      
      - name: Build path chart
        if: steps.manual-filter.outputs.path == 'true'
        run: |
          echo "Building path chart..."
          mkdir -p .cr-local-charts
          
          # If dependencies were updated, use the local versions
          if grep -q "name: guard" charts/path/Chart.yaml && [ -f "$(ls -1 .cr-local-charts/guard-*.tgz 2>/dev/null | head -1)" ]; then
            echo "Using local guard chart for dependency"
            mkdir -p charts/path/charts
            cp .cr-local-charts/guard-*.tgz charts/path/charts/
          fi
          
          if grep -q "name: watch" charts/path/Chart.yaml && [ -f "$(ls -1 .cr-local-charts/watch-*.tgz 2>/dev/null | head -1)" ]; then
            echo "Using local watch chart for dependency"
            mkdir -p charts/path/charts
            cp .cr-local-charts/watch-*.tgz charts/path/charts/
          fi
          
          helm dependency build charts/path
          helm package charts/path -d .cr-local-charts
      
      # Phase 2: Move all packaged charts to release directory
      - name: Prepare charts for release
        if: steps.manual-filter.outputs.guard == 'true' || steps.manual-filter.outputs.watch == 'true' || steps.manual-filter.outputs.path == 'true'
        run: |
          mkdir -p .cr-release-packages
          if [ -d ".cr-local-charts" ]; then
            cp .cr-local-charts/*.tgz .cr-release-packages/ || true
            echo "Charts ready for release:"
            ls -la .cr-release-packages/
          fi
      
      # Upload all packaged charts at once
      - name: Upload charts
        if: steps.manual-filter.outputs.guard == 'true' || steps.manual-filter.outputs.watch == 'true' || steps.manual-filter.outputs.path == 'true'
        run: |
          if [ -n "$(ls -A .cr-release-packages)" ]; then
            echo "Uploading packaged charts..."
            cr upload -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -p .cr-release-packages --token "${{ secrets.GITHUB_TOKEN }}" --skip-existing
          else
            echo "No charts to upload"
          fi
      
      # Update the Helm chart index
      - name: Update and push chart index
        if: steps.manual-filter.outputs.guard == 'true' || steps.manual-filter.outputs.watch == 'true' || steps.manual-filter.outputs.path == 'true'
        run: |
          if [ -n "$(ls -A .cr-release-packages)" ]; then
            echo "Updating Helm chart index..."
            cr index -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -p .cr-release-packages --push
          else
            echo "No charts to index"
          fi
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
